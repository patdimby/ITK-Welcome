//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Intitek.Welcome.Domain
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.SqlClient;
    using Intitek.Welcome.Infrastructure.UnitOfWork;

    public partial class WelcomeDB : DbContext, IUnitOfWork
    {
        void IUnitOfWork.SaveChanges()
        {
            base.SaveChanges();
        }
        private const string CONNECTIONSTRING = @"metadata=res://*/WelcomeDB.csdl|res://*/WelcomeDB.ssdl|res://*/WelcomeDB.msl;provider=System.Data.SqlClient;provider connection string='data source={0};initial catalog={1};persist security info=True;user id={2};password={3};MultipleActiveResultSets=True;App=EntityFramework'";
        public WelcomeDB()
            : base(CONNECTIONSTRING)
        {
            try
            {

            }
            catch (SqlException e)
            {
                throw (new Exception());
            }
        }

        public WelcomeDB(string server, string database, string user, string password)
            : base(string.Format(CONNECTIONSTRING, server, database, user, password))
        {
            try
            {

            }
            catch (SqlException e)
            {
                throw (new Exception());
            }
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public virtual DbSet<AD> AD { get; set; }
        public virtual DbSet<Batchs> Batchs { get; set; }
        public virtual DbSet<BlackList> BlackList { get; set; }
        public virtual DbSet<CityEntityBlackListed> CityEntityBlackListed { get; set; }
        public virtual DbSet<Config> Config { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<DocumentCategory> DocumentCategory { get; set; }
        public virtual DbSet<DocumentCategoryLang> DocumentCategoryLang { get; set; }
        public virtual DbSet<DocumentLang> DocumentLang { get; set; }
        public virtual DbSet<DocumentVersion> DocumentVersion { get; set; }
        public virtual DbSet<DocumentVersionLang> DocumentVersionLang { get; set; }
        public virtual DbSet<EntityDocument> EntityDocument { get; set; }
        public virtual DbSet<HistoActions> HistoActions { get; set; }
        public virtual DbSet<HistoBatchs> HistoBatchs { get; set; }
        public virtual DbSet<HistoEmails> HistoEmails { get; set; }
        public virtual DbSet<HistoUserQcmDocVersion> HistoUserQcmDocVersion { get; set; }
        public virtual DbSet<IntitekUser> IntitekUser { get; set; }
        public virtual DbSet<Lang> Lang { get; set; }
        public virtual DbSet<Logos> Logos { get; set; }
        public virtual DbSet<MailKeywords> MailKeywords { get; set; }
        public virtual DbSet<MailTemplate> MailTemplate { get; set; }
        public virtual DbSet<Profile> Profile { get; set; }
        public virtual DbSet<ProfileDocument> ProfileDocument { get; set; }
        public virtual DbSet<ProfileUser> ProfileUser { get; set; }
        public virtual DbSet<Qcm> Qcm { get; set; }
        public virtual DbSet<QcmLang> QcmLang { get; set; }
        public virtual DbSet<Question> Question { get; set; }
        public virtual DbSet<QuestionLang> QuestionLang { get; set; }
        public virtual DbSet<Reponse> Reponse { get; set; }
        public virtual DbSet<ReponseLang> ReponseLang { get; set; }
        public virtual DbSet<StatusDefinition> StatusDefinition { get; set; }
        public virtual DbSet<SubCategory> SubCategory { get; set; }
        public virtual DbSet<SubCategoryLang> SubCategoryLang { get; set; }
        public virtual DbSet<UserDocument> UserDocument { get; set; }
        public virtual DbSet<UserQcm> UserQcm { get; set; }
        public virtual DbSet<UserQcmReponse> UserQcmReponse { get; set; }
        public virtual DbSet<WelcomeMessage> WelcomeMessage { get; set; }
        public virtual DbSet<Histo_AD> Histo_AD { get; set; }
        public virtual DbSet<ImportManager> ImportManager { get; set; }

        [DbFunction("WelcomeDB", "f_ListApprobations")]
        public virtual IQueryable<f_ListApprobations_Result> f_ListApprobations(string mois)
        {
            var moisParameter = mois != null ?
                new ObjectParameter("Mois", mois) :
                new ObjectParameter("Mois", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f_ListApprobations_Result>("[WelcomeDB].[f_ListApprobations](@Mois)", moisParameter);
        }

        [DbFunction("WelcomeDB", "f_ListDocsApprobations")]
        public virtual IQueryable<f_ListDocsApprobations_Result> f_ListDocsApprobations(string mois)
        {
            var moisParameter = mois != null ?
                new ObjectParameter("Mois", mois) :
                new ObjectParameter("Mois", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f_ListDocsApprobations_Result>("[WelcomeDB].[f_ListDocsApprobations](@Mois)", moisParameter);
        }

        [DbFunction("WelcomeDB", "f_ListDocsSensibilisations")]
        public virtual IQueryable<f_ListDocsSensibilisations_Result> f_ListDocsSensibilisations(string mois)
        {
            var moisParameter = mois != null ?
                new ObjectParameter("Mois", mois) :
                new ObjectParameter("Mois", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f_ListDocsSensibilisations_Result>("[WelcomeDB].[f_ListDocsSensibilisations](@Mois)", moisParameter);
        }

        [DbFunction("WelcomeDB", "f_ListSensibilisations")]
        public virtual IQueryable<f_ListSensibilisations_Result> f_ListSensibilisations(string mois)
        {
            var moisParameter = mois != null ?
                new ObjectParameter("Mois", mois) :
                new ObjectParameter("Mois", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f_ListSensibilisations_Result>("[WelcomeDB].[f_ListSensibilisations](@Mois)", moisParameter);
        }

        public virtual int p_CreSnapshot(string mois, ObjectParameter nB_Users, ObjectParameter nB_Docs)
        {
            var moisParameter = mois != null ?
                new ObjectParameter("Mois", mois) :
                new ObjectParameter("Mois", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_CreSnapshot", moisParameter, nB_Users, nB_Docs);
        }

        [DbFunction("WelcomeDB", "f_ListMonthsHistoAD")]
        public virtual IQueryable<string> f_ListMonthsHistoAD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[WelcomeDB].[f_ListMonthsHistoAD]()");
        }

        public virtual int p_SwapEmails(string oldEmail, string newEmail, ObjectParameter retour)
        {
            var oldEmailParameter = oldEmail != null ?
                new ObjectParameter("OldEmail", oldEmail) :
                new ObjectParameter("OldEmail", typeof(string));

            var newEmailParameter = newEmail != null ?
                new ObjectParameter("NewEmail", newEmail) :
                new ObjectParameter("NewEmail", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_SwapEmails", oldEmailParameter, newEmailParameter, retour);
        }

        public virtual int p_ReinitUserDocQcm(Nullable<int> iD_Document, Nullable<bool> isMajor)
        {
            var iD_DocumentParameter = iD_Document.HasValue ?
                new ObjectParameter("ID_Document", iD_Document) :
                new ObjectParameter("ID_Document", typeof(int));

            var isMajorParameter = isMajor.HasValue ?
                new ObjectParameter("isMajor", isMajor) :
                new ObjectParameter("isMajor", typeof(bool));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_ReinitUserDocQcm", iD_DocumentParameter, isMajorParameter);
        }
    }
}
